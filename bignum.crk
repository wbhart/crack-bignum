# Rudimentary bigint implementation for crack
#
# (C) 2014 William Hart
#
# MIT or 2-clause BSD both ok.
#
# Features:
#   * Use low level GMP mpn functions. This is more efficient for some of the
#     operators, since GMP mpz's cannot assume there is no aliasing. We can.
#   * No wrapping of a GMP object with a crack object. We do all memory
#     management in crack.
#   * Some mathematical types are parameterised by values, not just other
#     types. For example, the value 3 mod 7 can be represented by the
#     residue 3 with type ResidueRing[IntegerRing, 7]. Here, the modulus 7
#     belongs to the type, not the value. But we don't want to dispatch on
#     the 7.
#
#     A standard workaround for this in computer algebra, is to record the
#     full type in an object called a parent. Thus the parent of 3 mod 7 is
#     ResidueRing[IntegerRing, 7], but the crack (dispatch) type is just
#     ResidueRing[IntegerRing].
#
#     To model parent objects below, we introduce a Parent class. 
#
#     The parent of an Integer is IntegerRing. Because Integers don't ever need
#     to know their parent, we don't include a pointer to the parent object in
#     each Integer object. Instead, the parent() function simply returns
#     IntegerRing when passed an Integer object. (Of course, if we were modelling
#     integers modulo 7, each residue object would need to contain a pointer to
#     its parent.) 
#   * We alias ZZ and IntegerRing (since the former is less characters) and make
#     the object callable. It accepts an int parameter and converts it into an
#     Integer. This means less typing than Integer(123). We can do ZZ(123)
#     instead. Since ZZ is the parent or "mathematical type" of an Integer, it
#     makes sense that it should be able to be used as a constructor for
#     Integers.
#
# Disadvantages:
#   * Bigint arithmetic is somehow a worst case for reference counting. It can
#     make things up to 100x slower.
#   * Using immutable structs is probably more efficient than heap allocated
#     objects due to reference counting, even with all the copying that results,
#     at least up to some fairly large size integers. But one needs compiler
#     support for immutable structs and passing by reference at the very least.
#   * One probably wants to deal with integers that fit into a single word
#     differently to larger bigints, to avoid the overhead of bignum arithmetic.
#     One has to be careful when doing this because mangled pointers don't play
#     nice with GC, and one never knows when one will prefer it to reference
#     counting.
#   * GMP mangles its function names with __g, _g or g, depending on the global
#     symbol prefix, so the function names below aren't quite portable.
#   * This code is written for 64 bit machines. There are some constants that
#     need to be changed on 32 bit machines.
#   * Use of malloc, realloc, free precludes use of an alternative memory manager
#     with GMP (a common use case for external libraries). This is not a massive
#     issue whilst the memory manager in crack is not swappable.
#   * Due to the fact that you can only forward reference classes and not methods
#     we are restricted to making parent a global function, not a method of the
#     Integer class. This will have to be changed because we have generic
#     classes and methods, but not generic ordinary functions, and parent() will
#     therefore need to be a method for generic classes not a global function.
#   * Crack doesn't have tuples so no easy way to return q, r from divrem. Can
#     pass q and r in, but crack doesn't allow q -= 1, etc, which means we have
#     to do memory management inefficiently for divrem functions and xgcd, etc.
#     It is also a very bad idea to have global functions of the form
#     divrem(T q, T r, T a, T b) instead of a divrem that returns a tuple
#     q, r = divrem(T a, T b) because Integers aren't the only thing that needs
#     a divrem or xgcd function. Doing things this way is encouraging the
#     need for multiple dispatch over generic types, which is a massive
#     undertaking, and somewhat dual to the class based OOP approach. Obviously
#     divrem and gcd ought to be methods, not generic functions, and this
#     kinda makes passing return values back via arguments a bad idea. Tuples
#     are a sensible solution, but not explicitly supported by crack.
#     On the other hand, there is no good way to deal with 
#     q, r = divrem(intz a, T b) without making divrem a generic function. It
#     can't easily be made a method of the class T.

import "libmpir.so" __gmpn_add, __gmpn_sub, __gmpn_add_1, __gmpn_sub_1, __gmpn_mul, 
       __gmpn_mul_1, __gmpn_divmod_1, __gmpn_tdiv_qr, __gmpn_copyi, __gmpn_copyd,
       __gmpn_cmp, __gmpn_get_str, __gmpn_scan1, __gmpn_gcd, __gmpn_rshift,
       __gmpn_lshift, __gmpn_zero;

import "libc.so.6" malloc, realloc, free, memcpy;

import crack.io cout;
import crack.lang Formatter, Exception, Buffer;
import crack.ascii radix;
import crack.math ceil;

# redefine these for 32 bit machines
const bytes_per_word := 8;
const bits_per_word := 64;

intz __gmpn_add(array[intz] r, array[intz] a, intz lena, array[intz] b, intz lenb);
intz __gmpn_sub(array[intz] r, array[intz] a, intz lena, array[intz] b, intz lenb);
intz __gmpn_add_1(array[intz] r, array[intz] a, intz lena, intz b);
intz __gmpn_sub_1(array[intz] r, array[intz] a, intz lena, intz b);
intz __gmpn_mul(array[intz] r, array[intz] a, intz lena, array[intz] b, intz lenb);
intz __gmpn_mul_1(array[intz] r, array[intz] a, intz lena, intz b);
intz __gmpn_divmod_1(array[intz] r, array[intz] a, intz lena, intz b);
void __gmpn_tdiv_qr(array[intz] q, array[intz] r, intz qxn, array[intz] a,
                                              intz lena, array[intz] b, intz lenb);
intz __gmpn_gcd(array[intz] r, array[intz] a, intz lena, array[intz] b, intz lenb);
intz __gmpn_cmp(array[intz] a, array[intz] b, intz lenb);
intz __gmpn_get_str(byteptr str, intz base, array[intz] b, intz lenb);
void __gmpn_copyi(array[intz] dst, array[intz] src, intz n);
void __gmpn_copyd(array[intz] dst, array[intz] src, intz n);
intz __gmpn_rshift(array[intz] r, array[intz] a, intz lena, intz bits);
intz __gmpn_lshift(array[intz] r, array[intz] a, intz lena, intz bits);
intz __gmpn_scan1(array[intz] a, intz bit);
void __gmpn_zero(array[intz] a, intz n);

byteptr malloc(intz size);
byteptr realloc(byteptr val, intz newsize);
void free(byteptr val);
byteptr memcpy(byteptr dest, byteptr source, intz num);

intz min(intz a, intz b) {
   return a < b ? a : b;
}

intz max(intz a, intz b) {
   return a >= b ? a : b;
}

intz abs(intz a) {
   return a < 0 ? -a : a;
}

class Parent {
   String desc;

   void formatTo(Formatter out) {
      out.write(desc);
   }
}

class Integer {
   intz size, alloc;
   array[intz] data;

   oper init(intz a) { 
      if (a < 0) { 
         size = -1;
         alloc = 1;
         data = array[intz](1);
         data[0] = -a;
      } else if (a > 0) { 
         size = 1;
         alloc = 1;
         data = array[intz](1);
         data[0] = a;
      } else { 
         size = 0;
         alloc = 0;
         data = null;
      }
   }

   oper init() : size = 0, alloc = 0, data = null {}

   oper del() { free(byteptr(data)); }

   void formatTo(Formatter out) {
      if (size == 0)
         out.write('0');
      else {
         asize := abs(size);
      
         datacopy := array[intz](asize);
         memcpy(byteptr(datacopy), byteptr(data), asize*bytes_per_word);
      
         digits := asize * 10 * (bits_per_word/32);
         cstr := malloc(digits + 1);
         digits = __gmpn_get_str(cstr, 10, datacopy, asize);

         for (i := 0; i < digits; i++)
            cstr[i] = cstr[i] + 48;

         if (size < 0)
            out.write('-');
         
         out.write(Buffer(cstr, digits));

         free(cstr);
         free(byteptr(datacopy));
      }
   }

   void fit(intz newalloc) {
      if (newalloc > alloc) {
         data = array[intz](realloc(byteptr(data), newalloc*bytes_per_word));
         alloc = newalloc;
      }
   }

   intz normalise(intz s) {
      while (s > 0 && data[s - 1] == 0)
         s--;
      return s;
   }

   int cmp(Integer b) {
      if (size > b.size)
         return 1;
      else if (size < b.size)
         return -1;
      else {
         asize := abs(size);
         
         if (asize == 0)
            return 0;
         
         r := __gmpn_cmp(data, b.data, asize);

         return size < 0 ? -r : r;
      }
   }

   intz bits() {
      asize := abs(size);
      
      if (asize == 0)
         return 0;

      lead := data[asize - 1];
      b := 0;

      while (lead != 0) { # FIXME: this should use a clz intrinsic
         b += 1;
         lead >>= 1;
      }

      return b + (asize - 1)*bits_per_word;
   }

   intz trailing_zeroes() {
      if (size == 0)
         return 0;

      return __gmpn_scan1(data, 0);
   }

   Integer oper +(Integer b) {
      r := Integer();
      asize := abs(size);
      bsize := abs(b.size);

      if ((size ^ b.size) < 0) { # different signs
         if (asize < bsize ||    # abs(b) > abs(this) 
            (asize == bsize && __gmpn_cmp(data, b.data, asize) < 0)) {
            r.fit(bsize);
            __gmpn_sub(r.data, b.data, bsize, data, asize);
            r.size = b.size < 0 ? -r.normalise(bsize) : r.normalise(bsize);
         } else {                # abs(b) <= abs(this)
            r.fit(asize);
            __gmpn_sub(r.data, data, asize, b.data, bsize);
            r.size = size < 0 ? -r.normalise(asize) : r.normalise(asize);
         }
      } else {                   # same signs
         if (asize < bsize) {
            r.fit(bsize + 1);
            r.data[bsize] = __gmpn_add(r.data, b.data, bsize, data, asize);
            r.size = b.size < 0 ? -r.normalise(bsize + 1) : r.normalise(bsize + 1);
         } else {
            r.fit(asize + 1);
            r.data[asize] = __gmpn_add(r.data, data, asize, b.data, bsize);
            r.size = b.size < 0 ? -r.normalise(asize + 1) : r.normalise(asize + 1);
         }
      }

      return r;
   }

   Integer oper -(Integer b) {
      r := Integer();
      asize := abs(size);
      bsize := abs(b.size);

      if ((size ^ b.size) >= 0) { # same signs
         if (asize < bsize ||     # abs(b) > abs(this) 
            (asize == bsize && __gmpn_cmp(data, b.data, asize) < 0)) {
            r.fit(bsize);
            __gmpn_sub(r.data, b.data, bsize, data, asize);
            r.size = b.size < 0 ? r.normalise(bsize) : -r.normalise(bsize);
         } else {                 # abs(b) <= abs(this)
            r.fit(asize);
            __gmpn_sub(r.data, data, asize, b.data, bsize);
            r.size = size < 0 ? -r.normalise(asize) : r.normalise(asize);
         }
      } else {                    # different signs
         if (asize < bsize) {
            r.fit(bsize + 1);
            r.data[bsize] = __gmpn_add(r.data, b.data, bsize, data, asize);
            r.size = size < 0 ? -r.normalise(bsize + 1) : r.normalise(bsize + 1);
         } else {
            r.fit(asize + 1);
            r.data[asize] = __gmpn_add(r.data, data, asize, b.data, bsize);
            r.size = size < 0 ? -r.normalise(asize + 1) : r.normalise(asize + 1);
         }
      }

      return r;
   }

   Integer oper +=(Integer b) {
      asize := abs(size);
      bsize := abs(b.size);

      if ((size ^ b.size) < 0) { # different signs
         if (asize < bsize ||    # abs(b) > abs(this) 
            (asize == bsize && __gmpn_cmp(data, b.data, asize) < 0)) {
            fit(bsize);
            __gmpn_sub(data, b.data, bsize, data, asize);
            size = b.size < 0 ? -normalise(bsize) : normalise(bsize);
         } else {                # abs(b) <= abs(this)
            __gmpn_sub(data, data, asize, b.data, bsize);
            size = size < 0 ? -normalise(asize) : normalise(asize);
         }
      } else {                   # same signs
         if (asize < bsize) {
            fit(bsize + 1);
            data[bsize] = __gmpn_add(data, b.data, bsize, data, asize);
            size = b.size < 0 ? -normalise(bsize + 1) : normalise(bsize + 1);
         } else {
            fit(asize + 1);
            data[asize] = __gmpn_add(data, data, asize, b.data, bsize);
            size = b.size < 0 ? -normalise(asize + 1) : normalise(asize + 1);
         }
      }

      return this;
   }

   Integer oper -=(Integer b) {
      asize := abs(size);
      bsize := abs(b.size);

      if ((size ^ b.size) >= 0) { # same signs
         if (asize < bsize ||     # abs(b) > abs(this) 
            (asize == bsize && __gmpn_cmp(data, b.data, asize) < 0)) {
            fit(bsize);
            __gmpn_sub(data, b.data, bsize, data, asize);
            size = b.size < 0 ? normalise(bsize) : -normalise(bsize);
         } else {                 # abs(b) <= abs(this)
            __gmpn_sub(data, data, asize, b.data, bsize);
            size = size < 0 ? -normalise(asize) : normalise(asize);
         }
      } else {                    # different signs
         if (asize < bsize) {
            fit(bsize + 1);
            data[bsize] = __gmpn_add(data, b.data, bsize, data, asize);
            size = size < 0 ? -normalise(bsize + 1) : normalise(bsize + 1);
         } else {
            fit(asize + 1);
            data[asize] = __gmpn_add(data, data, asize, b.data, bsize);
            size = size < 0 ? -normalise(asize + 1) : normalise(asize + 1);
         }
      }

      return this;
   }

   Integer oper -(intz b); # forward declaration

   Integer oper +(intz b) {
      if (b < 0)
         return this - (-b);

      r := Integer();
      asize := abs(size);

      if (size < 0) {         # this < 0
         if (asize > 1 || (asize == 1 && data[0] >= b)) { # abs(this) >= b
            r.fit(asize);
            __gmpn_sub_1(r.data, data, asize, b);
            r.size = -r.normalise(asize);
         } else {                                         # abs(this) < b
            r.fit(1);
            r.data[0] = b - data[0];
            r.size = 1;
         }
      } else if (size == 0) { # this == 0
         r.fit(1);
         r.data[0] = b;
         r.size = r.normalise(1);
      } else {                # this > 0
         r.fit(asize + 1);
         r.data[asize] = __gmpn_add_1(r.data, data, asize, b);
         r.size = r.normalise(asize + 1);
      }           
      
      return r;
   }

   Integer oper -(intz b) {
      if (b < 0)
         return this + (-b);

      r := Integer();
      asize := abs(size);

      if (size > 0) {         # this > 0
         if (asize > 1 || (asize == 1 && data[0] >= b)) { # abs(this) >= b
            r.fit(asize);
            __gmpn_sub_1(r.data, data, asize, b);
            r.size = r.normalise(asize);
         } else {                                         # abs(this) < b
            r.fit(1);
            r.data[0] = b - data[0];
            r.size = -1;
         }
      } else if (size == 0) { # this == 0
         r.fit(1);
         r.data[0] = b;
         r.size = -r.normalise(1);
      } else {                # this < 0
         r.fit(asize + 1);
         r.data[asize] = __gmpn_add_1(r.data, data, asize, b);
         r.size = -r.normalise(asize + 1);
      }           
               
      return r;
   }

   Integer oper -=(intz b); # forward declaration

   Integer oper +=(intz b) {
      if (b < 0)
         return this -= (-b);

      asize := abs(size);

      if (size < 0) {         # this < 0
         if (asize > 1 || (asize == 1 && data[0] >= b)) { # abs(this) >= b
            __gmpn_sub_1(data, data, asize, b);
            size = -normalise(asize);
         } else {                                         # abs(this) < b
            data[0] = b - data[0];
            size = 1;
         }
      } else if (size == 0) { # this == 0
         fit(1);
         data[0] = b;
         size = normalise(1);
      } else {                # this > 0
         fit(asize + 1);
         data[asize] = __gmpn_add_1(data, data, asize, b);
         size = normalise(asize + 1);
      }           
      
      return this;
   }

   Integer oper -=(intz b) {
      if (b < 0)
         return this += (-b);

      asize := abs(size);

      if (size > 0) {         # this > 0
         if (asize > 1 || (asize == 1 && data[0] >= b)) { # abs(this) >= b
            __gmpn_sub_1(data, data, asize, b);
            size = normalise(asize);
         } else {                                         # abs(this) < b
            data[0] = b - data[0];
            size = -1;
         }
      } else if (size == 0) { # this == 0
         fit(1);
         data[0] = b;
         size = -normalise(1);
      } else {                # this < 0
         fit(asize + 1);
         data[asize] = __gmpn_add_1(data, data, asize, b);
         size = -normalise(asize + 1);
      }           
               
      return this;
   }

   Integer oper *(Integer b) {
      intz cy;
      
      r := Integer();
      asize := abs(size);
      bsize := abs(b.size);

      if (asize == 0 || bsize == 0)
         return r;

      rsize := asize + bsize;
      r.fit(rsize);
      
      if (asize >= bsize)
         cy = __gmpn_mul(r.data, data, asize, b.data, bsize);
      else
         cy = __gmpn_mul(r.data, b.data, bsize, data, asize);

      if (cy == 0)
         rsize -= 1;

      r.size = (size ^ b.size) < 0 ? -rsize : rsize;

      return r;
   }

   Integer oper *(intz b) {
      r := Integer();
      asize := abs(size);
      
      if (asize == 0 || b == 0)
         return r;

      rsize := asize + 1;
      r.fit(rsize);
      
      r.data[asize] = __gmpn_mul_1(r.data, data, asize, abs(b));
      
      if (r.data[asize] == 0)
         rsize -= 1;

      r.size = (size ^ b) < 0 ? -rsize : rsize;

      return r;
   }

   Integer oper *=(intz b) {
      asize := abs(size);
      
      if (asize == 0 || b == 0) {
         size = 0;
         return this;
      }

      rsize := asize + 1;
      fit(rsize);
      
      data[asize] = __gmpn_mul_1(data, data, asize, abs(b));
      
      if (data[asize] == 0)
         rsize -= 1;

      size = (size ^ b) < 0 ? -rsize : rsize;

      return this;
   }

   Integer oper /(intz b) {
      if (b == 0)
         throw Exception('divide by zero');

      q := Integer();
      asize := abs(size);
      
      if (asize == 0)
         return q;

      q.fit(asize);
      
      r := __gmpn_divmod_1(q.data, data, asize, abs(b));
      
      if (q.data[asize - 1] == 0)
         asize -= 1;

      q.size = (size ^ b) < 0 ? -asize : asize;

      if (q.size < 0 && r != 0)
         q -= 1;

      return q;
   }

   Integer oper /=(intz b) {
      if (b == 0)
         throw Exception('divide by zero');

      asize := abs(size);
      
      if (asize == 0)
         return this;

      r := __gmpn_divmod_1(data, data, asize, abs(b));
      
      if (data[asize - 1] == 0)
         asize -= 1;

      size = (size ^ b) < 0 ? -asize : asize;
   
      if (size < 0 && r != 0)
         this -= 1;

      return this;
   }

   Integer oper %(intz b) {
      if (b == 0)
         throw Exception('divide by zero');

      q := Integer();
      asize := abs(size);
      
      if (asize == 0)
         return q;    

      q.fit(asize);
      
      r := __gmpn_divmod_1(q.data, data, asize, abs(b));

      if (q.data[asize - 1] == 0)
         asize -= 1;

      r = size > 0 ? r : -r;
      q.size = (size ^ b) < 0 ? -asize : asize;
      
      if (q.size < 0 && r != 0)
         r += b;
      
      return Integer(r);
   }

   Integer oper %=(intz b) {
      if (b == 0)
         throw Exception('divide by zero');

      q := Integer();
      asize := abs(size);
      
      if (asize == 0)
         return this;    

      q.fit(asize);
      
      r := __gmpn_divmod_1(q.data, data, asize, abs(b));
      
      if (q.data[asize - 1] == 0)
         asize -= 1;

      r = size > 0 ? r : -r;
      q.size = (size ^ b) < 0 ? -asize : asize;

      if (q.size < 0 && r != 0)
         r += b;

      if (r == 0)
         size = 0;
      else {
         size = 1;
         data[0] = r;
      }

      return this;
   }

   Integer oper /(Integer b) {
      if (b.size == 0)
         throw Exception('divide by zero');

      q := Integer();
      r := Integer();
      asize := abs(size);
      bsize := abs(b.size);

      qsize := asize - bsize + 1;
      
      if (qsize > 0) {
         q.fit(qsize);
         r.fit(bsize);
      
         __gmpn_tdiv_qr(q.data, r.data, 0, data, asize, b.data, bsize);
      
         if (q.data[qsize - 1] == 0)
            qsize -= 1;

         r.size = r.normalise(bsize);
      } else
         qsize = 0;
         # r.size not needed in this case

      q.size = (size ^ b.size) < 0 ? -qsize : qsize;

      if (q.size < 0 && r.size != 0)
         q -= 1;

      return q;
   }

   Integer oper %(Integer b) {
      if (b.size == 0)
         throw Exception('divide by zero');

      q := Integer();
      r := Integer();
      asize := abs(size);
      bsize := abs(b.size);

      qsize := asize - bsize + 1;
      
      if (qsize > 0) {
         q.fit(qsize);
         r.fit(bsize);
      
         __gmpn_tdiv_qr(q.data, r.data, 0, data, asize, b.data, bsize);
      
         if (q.data[qsize - 1] == 0)
            qsize -= 1;

         r.size = r.normalise(bsize);
      } else {
         qsize = 0;
         __gmpn_copyi(r.data, data, size);
         r.size = asize;
      }

      q.size = (size ^ b.size) < 0 ? -qsize : qsize;

      if (q.size < 0 && r.size != 0)
         r += b;

      return r;
   }

   Integer oper >>(intz shift) {
      if (shift < 0)
         throw Exception('shift by negative number of bits');

      if (shift == 0)
         return this;

      r := Integer();

      if (shift >= bits())
         return r;
      
      asize := abs(size);
      
      slimbs := shift/bits_per_word;
      sbits := shift%bits_per_word;

      asize -= slimbs;

      r.fit(asize);

      if (sbits == 0)
         __gmpn_copyi(r.data, data + slimbs, asize);
      else
         __gmpn_rshift(r.data, data + slimbs, asize, sbits);

      if (r.data[asize - 1] == 0)
         asize -= 1;

      r.size = size < 0 ? -asize : asize;

      return r;
   }

   Integer oper <<(intz shift) {
      if (shift < 0)
         throw Exception('shift by negative number of bits');

      if (shift == 0)
         return this;

      r := Integer();

      asize := abs(size);
      
      slimbs := shift/bits_per_word;
      sbits := shift%bits_per_word;

      asize += slimbs;

      if (sbits == 0) {
         r.fit(asize);
         __gmpn_copyi(r.data + slimbs, data, asize - slimbs);
      } else {
         r.fit(asize + 1);
         r.data[asize] = __gmpn_lshift(r.data + slimbs, data, asize - slimbs, sbits);
         if (r.data[asize] != 0)
            asize += 1;
      }

      if (slimbs != 0)
         __gmpn_zero(r.data, slimbs);

      r.size = size < 0 ? -asize : asize;

      return r;
   }

   Integer oper >>=(intz shift) {
      if (shift < 0)
         throw Exception('shift by negative number of bits');

      if (shift == 0)
         return this;

      if (shift >= bits()) {
         size = 0;
         return this;
      }
      
      asize := abs(size);
      
      slimbs := shift/bits_per_word;
      sbits := shift%bits_per_word;

      asize -= slimbs;

      if (sbits == 0)
         __gmpn_copyi(data, data + slimbs, asize);
      else
         __gmpn_rshift(data, data + slimbs, asize, sbits);

      if (data[asize - 1] == 0)
         asize -= 1;

      size = size < 0 ? -asize : asize;

      return this;
   }

   Integer oper <<=(intz shift) {
      if (shift < 0)
         throw Exception('shift by negative number of bits');

      if (shift == 0)
         return this;

      asize := abs(size);
      
      slimbs := shift/bits_per_word;
      sbits := shift%bits_per_word;

      asize += slimbs;

      if (sbits == 0) {
         fit(asize);
         __gmpn_copyd(data + slimbs, data, asize - slimbs);
      } else {
         fit(asize + 1);
         data[asize] = __gmpn_lshift(data + slimbs, data, asize - slimbs, sbits);
         if (data[asize] != 0)
            asize += 1;
      }

      if (slimbs != 0)
         __gmpn_zero(data, slimbs);

      size = size < 0 ? -asize : asize;

      return this;
   }


}

void swap(Integer a, Integer b) {
   tdata := a.data;
   a.data = b.data;
   b.data = tdata;
   tsize := a.size;
   a.size = b.size;
   b.size = tsize;
   talloc := a.alloc;
   a.alloc = b.alloc;
   b.alloc = talloc;

}

intz divrem(Integer q, Integer a, intz b) {
   if (b == 0)
      throw Exception('divide by zero');

   asize := abs(a.size);
   
   q2 := Integer();
      
   if (asize == 0) {
      q2.size = 0;
      
      swap(q, q2);

      return 0;
   }

   q2.fit(asize);
      
   r := __gmpn_divmod_1(q2.data, a.data, asize, abs(b));
      
   if (q2.data[asize - 1] == 0)
      asize -= 1;

   r = a.size > 0 ? r : -r;
   q2.size = (a.size ^ b) < 0 ? -asize : asize;

   if (q2.size < 0 && r != 0) {
      q2 -= 1;
      r += b;
   }

   swap(q, q2);

   return r;
}

void divrem(Integer q, Integer r, Integer a, Integer b) {
   if (b.size == 0)
      throw Exception('divide by zero');

   q2 := Integer();
   r2 := Integer();
   asize := abs(a.size);
   bsize := abs(b.size);

   qsize := asize - bsize + 1;
      
   if (qsize > 0) {
      q2.fit(qsize);
      r2.fit(bsize);
       
      __gmpn_tdiv_qr(q2.data, r2.data, 0, a.data, asize, b.data, bsize);
      
      if (q.data[qsize - 1] == 0)
         qsize -= 1;

      r2.size = r2.normalise(bsize);
   } else {
      qsize = 0;
      __gmpn_copyi(r.data, a.data, a.size);
      r2.size = asize;
   }

   q2.size = (a.size ^ b.size) < 0 ? -qsize : qsize;

   if (q2.size < 0 && r2.size != 0) {
      q2 -= 1;
      r2 += b;
   }

   swap(q, q2);
   swap(r, r2);
}

Integer gcd(Integer m, Integer n) {
   if (m.size == 0)
      return n;

   if (n.size == 0)
      return m;

   Integer a, b;
   r := Integer();
   intz atrail;

   mtrail := m.trailing_zeroes();
   ntrail := n.trailing_zeroes();
   mbits := m.bits();
   nbits := n.bits();
   
   if (mbits - mtrail < nbits - ntrail) {
      a = m;
      b = n;
      atrail = mtrail;
   } else {
      a = n;
      b = m;
      atrail = ntrail;
   }

   asize := abs(a.size);
   bsize := abs(b.size);
      
   r.fit(min(asize, bsize));

   slimbs := atrail/bits_per_word;
   sbits := atrail%bits_per_word;

   asize -= slimbs;

   acopy := array[intz](asize);
   bcopy := array[intz](bsize);

   __gmpn_copyi(bcopy, b.data, bsize);

   if (sbits == 0)
      __gmpn_copyi(acopy, a.data + slimbs, asize);
   else
      __gmpn_rshift(acopy, a.data + slimbs, asize, sbits);

   if (acopy[asize - 1] == 0)
      asize -= 1;

   rshift := min(mtrail, ntrail);
   rlimbs := rshift/bits_per_word;
   rbits := rshift%bits_per_word;

   rsize := __gmpn_gcd(r.data + rlimbs, bcopy, bsize, acopy, asize);

   if (rlimbs != 0)
      __gmpn_zero(r.data, rlimbs);

   if (rbits) {
      cy := __gmpn_lshift(r.data + rlimbs, r.data + rlimbs, rsize, rbits);
      if (cy != 0)
         r.data[rlimbs + rsize] = cy;
      rsize += 1;
   }

   rsize += rlimbs;

   r.size = a.size < 0 && b.size < 0 ? -rsize : rsize;

   return r;          
}

class IntegerRingClass : Parent {
   oper init() { desc = "Integer ring"; }

   Integer oper call(intz a) {
      return Integer(a);
   }
}

IntegerRing := IntegerRingClass();

ZZ := IntegerRing;

Parent parent(Integer a) {
   return IntegerRing;
}

/*******************************************************

   Examples of usage:

*******************************************************/

/*

a := Integer(1);
c := Integer(12);
d := ZZ(-1);

cout `$(c)\n`;

m := Integer(123);

for (i := 0; i < 100; i++)
   c += d;

for (i := 0; i < 100; i++)
   c = c * m;

cout `$(c)\n`;

for (i := 0; i < 10; i++)
   c = c * 13;

cout `$(c)\n`;

for (i := 0; i < 10; i++)
   c /= 13;

cout `$(c)\n`;

n := Integer(13);

for (i := 0; i < 10; i++)
   c = c * 13;

cout `$(c)\n`;

for (i := 0; i < 10; i++)
   c /= n;

cout `$(c)\n`;

cout `$(c % 13)\n`;

cout `$(c % n)\n`;

c %= 37;

cout `$(c)\n`;

cout `$(parent(c))\n`;

cout `$(c == a)\n`;

cout `$(c < n)\n`;

cout `$(d >= m)\n`;

cout `$(n != d)\n`;

cout `$(c.bits())\n`;

cout `$(c.trailing_zeroes())\n`;

d = gcd(a, c);

cout `$(d)\n`;

cout `$(c>>2)\n`;

c >>= 2;

cout `$(c)\n`;

cout `$(c<<20)\n`;

cout `$(c<<200)\n`;

c <<= 20;

cout `$(c)\n`;

*/
